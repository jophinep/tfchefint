#!/opt/chef/embedded/bin/ruby

#
# artifact_update.rb
#
# Author:: Julian Dunn (<jdunn@opscode.com>)
#
# Copyright 2013, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'net/http'
require 'syslog'
require 'rubygems'
require 'chef/config'
require 'chef/log'
require 'chef/rest'
require 'chef/data_bag'
require 'chef/data_bag_item'
require 'chef/mixin/shell_out'

include Chef::Mixin::ShellOut

if RUBY_VERSION < "1.9"
  print "Ruby 1.9.x is required to use this script. Please use the Ruby that comes with Chef."
  exit 1
end

# Use the same config as knife uses
Chef::Config.from_file(File.join(ENV['HOME'], '.chef', 'knife.rb'))

# Begin global variables
bagname = '<%= @bagname %>'
target_env_field = 'Deploy To'
frsid_field = 'FRSID'
appname_field = 'Application Shortname'
# End global variables

syslog = Syslog.open(::File::basename($0), Syslog::LOG_PID, Syslog::LOG_DAEMON | Syslog::LOG_LOCAL3)

tf_vars = ENV.to_hash.select { |k,v| k =~ /^tf_/ }
tf_flex_field_vars = tf_vars.select { |k,v| k=~ /^tf_updated_flex_field_/ }

unless tf_vars['tf_updated_Path'] =~ /deployment_tracker/ then
  syslog.debug("Exiting early because the artifact being updated is not a deployment tracker artifact")
  exit 0
end

# Find the corresponding values for the vars of interest;
# We're looking for the value of the flex fields named:
#
# "Deploy To" -- which we set as 'target_env'
# "FRSID" -- which we set as 'frsid'
# "Application Shortname" -- which we set as 'appname'

target_env, frsid, appname = nil

tf_flex_field_vars.each do |k, v|
  if v == target_env_field then
    target_env = tf_flex_field_vars[k.sub(/name/, 'value')]
    syslog.debug("target_env set to " + target_env)
  end
  if v == frsid_field then
    frsid = tf_flex_field_vars[k.sub(/name/, 'value')]
    syslog.debug("frsid set to " + frsid)
  end
  if v == appname_field then
    appname = tf_flex_field_vars[k.sub(/name/, 'value')]
    syslog.debug("appname set to " + appname)
  end
end

if (target_env.nil? || frsid.nil? || appname.nil?) then
  syslog.crit("Required fields not defined in tracker; can't proceed")
  exit 1
end

# Make sure data bag exists
begin
  bag = Chef::DataBag.load(bagname)
rescue Net::HTTPServerException => e
  if e.response.code == "404" then
    syslog.debug("Creating a new data bag named " + bagname)
    bag = Chef::DataBag.new
    bag.name(bagname)
    bag.save
  else
    syslog.crit("Received an HTTPException of type " + e.response.code)
    raise
  end
end

# Load data bag item, or create it if it doesn't exist yet
begin
  item = Chef::DataBagItem.load(bagname, appname)
rescue Net::HTTPServerException => e
  if e.response.code == "404" then
    syslog.debug("Creating a new data bag item named " + appname + " in data bag " + bagname)
    item = Chef::DataBagItem.new
    item.data_bag(bagname)
    item['id'] = appname
  else
    syslog.crit("Received an HTTPException of type " + e.response.code)
    raise
  end
end

item[target_env].nil? && item[target_env] = Hash.new
item[target_env]["frsid"] = frsid
item.save

# Exec knife to log into remotes and run Chef once
shell_out!("knife ssh 'chef_environment:#{target_env} AND roles:app_#{appname}' 'sudo chef-client --once'")
